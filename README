The Python Freelancer Toolkit

A python API for parsing and modifying data files from Microsoft's 
game Freelancer 

Author: Fenris_Wolf - YSPStudios, TekagisTreasure mod


**** Please note this is NOT a stand alone tool. ****

It is designed to be a base framework for building tools, or to be used in a 
interactive python shell.  It provides a python interface for parsing and 
error checking ALL of Freelancer's .ini files, as well as write new data into 
them. PyFL can also read/write character files and .dll resources with python.
(UTF files and binary offsets support is planned)

Its uses are pretty much unlimited when working in a interactive shell, or if 
you can write custom tool functions.


Features Include:

* ini parsing methods are tweakable by modders, not just python developers
Many mods are setup differently, sometimes different tools add things into 
the mod files: FL Explorer adds [FLExplorer] sections, Flac uses all kinds 
of different keys embedded in FL's data files, we can not accurately predict 
the data structure of every mod.
Therefore, data parsing rules but be designed in a way the mod developers 
themselves can edit, without having to learn python.

PyFL's parser attempts to solve this by using a ini template system, however 
due to the oddness of some of FL's data lines, its increases the complexity 
requirement for the actual python engine.
    

* Cross-platform, without Wine.
PyFL needs to be able to run most of its features on linux machines as well as 
windows.  This way it can run on servers separate from the FLServer (such as 
webservers).  OS specific python modules are avoided.  

Instead of requiring windows specific modules to access the resource .dll 
files, PyFL can read .frc text files created with adoxa's res2frc.exe program. 
If PyFL is to run on linux you must create the frc files with wine or a 
windows machine.  PyFL on windows can automatically do this, or access 
resources using the .dll method.


* ini editing preserves all blank lines and comments.
This would seem like a no brainer, but most read/write engines fail to do this.


* ini files are list objects, and [Sections] are dict objects.


* Effort to follow PEP8 standards
Ensure readability and standardization of the python code.


-------------------------------------------------------------------------------
REQUIREMENTS:
python 2.7 (not tested with python 3.* yet)

OPTIONAL:
Adoxa's tools (frc.exe, res2frc.exe and createid.exe)
    http://adoxa.altervista.org/freelancer/tools.html
pywin32 python modules (if using .dlls for resources)


-------------------------------------------------------------------------------
INI PARSING NOTES:
None of PyFL's ini parsing rules are 'hardcoded' these are all stored in .ini 
files themselves, in a format similar to FL's data files. Initially it reads 
the freelancer.ini [data] section to get lists of files and what kind of content 
to expect. For example it reads:

equipment = equipment\weapon_equip.ini

and knows this is a 'equipment' file. In the PyFL\etc\parser directory there 
is a 'equipment.ini' file, which contains templates for all the various 
equipment [Sections], each section has a series of 'key = rules'. The 'keys' 
will match up with FL's ini files, and the 'rules' will tell PyFL how to parse 
that line: if its required or optional, if its a sortkey like nickname, if its 
a ids value, if the value is a integer/float/bool true/false etc, or if its a 
reference to another file PyFL should load (like universe.ini points to the 
system files).

-----------------------------------------------------------------------------------------
KNOWN ISSUES AND BUGS:
* Freelancer.ini has fx\explosions.ini listed as both 'explosions = ' and 
    'debris = '. The parser doesn't like this as it only reads a file once, 
    and under a single group. Therefore, ensure 'explosions = fx\explosions.ini' 
    comes first in freelancer.ini

* Room:Room_Info:scene lines are not properly parsed due to only allowing one 
    -o argument per rule line. The only effect is cityscape and planetscape 
    files generate a error on some of these lines if a argument appears after 
    the thn script. The rest of the line is fully parsed but the final argument 
    is dropped.
	
* Various 'color' keys in the ini's support both byte (0 to 255) and float 
    (0.0 to 1.0) values. The parser doesn't agree with this, and may generate 
    errors. Tweaking your rule files will fix this if your only uses 1 style 
    (byte or float, but not mixed)

* Many various rule files need tweaking for better argument matching, currently 
    they may generate false positive errors. The cross reference validation 
    (-m|--match) rules especially need tweaks as not all of them have been 
    inputted yet.

* When using IniFile.set(), if the value is a list (declared 
    multiline in the rules), the new value list MUST be the same length as the 
    old value list or a NotImplementedError exception is raised.

* -m|--match rule option generates errors on robots without heads 
    (space_costume = lines in system files)

* -r regex rule option does not support spaces.

* BINI compressed files not yet supported.

* UTF files not yet supported.

* Binary hexediting on the exe files not yet supported.

* Writing ids names and infocards to resource dlls not yet supported using 
    'dll' method, (reading is fully functional).
  frc method supports read and write

